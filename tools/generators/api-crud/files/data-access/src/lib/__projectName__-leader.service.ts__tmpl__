import { Injectable } from '@nestjs/common'
import { PrismaSelect } from '@paljs/plugins'
import { Prisma } from '@prisma/client'
import { GraphQLResolveInfo } from 'graphql'
import { <%= apiClassName %>CoreDataAccessService, CorePaging } from '@<%= npmScope %>/<%= directory %>/core/data-access'

import { AdminCreate<%= modelClassName %>Input } from './dto/admin-create-<%= modelName %>.input'
import { AdminList<%= modelClassName %>Input } from './dto/admin-list-<%= modelName %>.input'
import { AdminUpdate<%= modelClassName %>Input } from './dto/admin-update-<%= modelName %>.input'

@Injectable()
export class <%= apiClassName %><%= modelClassName %>DataAccessLeaderService {
  constructor(private readonly data: <%= apiClassName %>CoreDataAccessService) {}

  private readonly searchFields = [<%- searchFields %>]
  private where(input: AdminList<%= modelClassName %>Input): Prisma.<%= modelClassName %>WhereInput {
    const query = input?.search?.trim()
    const terms: string[] = query?.includes(' ') ? query.split(' ') : [query]

    // TODO: implement leader search query
    // function leaderSearch() {}

    function relationalSearch() {
     // TODO: implement relational search for <%= modelName %>
     // if (input?.regionId) {
     //   return { regionId: input.regionId }
     // }
     // if (input?.memberId) {
     //   return { members: { some: { id: input.memberId } } }
     // }
      return null
    }
    return {
      AND: [
        relationalSearch(),
        ...terms.map((term) => ({
          OR: this.searchFields.map((field) => ({ [field]: { contains: term, mode: 'insensitive' } })),
        })),
      ],
    }
  }

  leader<%= pluralClassName %>(info: GraphQLResolveInfo, leaderId: string, input?: AdminList<%= modelClassName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.findMany({
      take: input?.take,
      skip: input?.skip,
      where: this.where(input),
      ...select,
    })
  }

  async leaderCount<%= pluralClassName %>(leaderId: string, input?: AdminList<%= modelClassName %>Input): Promise<CorePaging> {
    const total = await this.data.<%= modelPropertyName %>.count()
    const count = await this.data.<%= modelPropertyName %>.count({ where: this.where(input) })
    const take = input?.take || 10
    const skip = input?.skip || 0
    const page = Math.floor(skip / take)
    return {
      take,
      skip,
      page,
      count,
      total,
    }
  }

  leader<%= modelClassName %>(info: GraphQLResolveInfo, leaderId: string, <%= modelPropertyName %>Id) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.findUnique({ where: { id: <%= modelPropertyName %>Id }, ...select, })
  }

  leaderCreate<%= modelClassName %>(info: GraphQLResolveInfo, leaderId: string, input: AdminCreate<%= modelClassName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.create({
      data: { ...input },
      ...select,
    })
  }

  leaderUpdate<%= modelClassName %>(info: GraphQLResolveInfo, leaderId: string, <%= modelPropertyName %>Id, input: AdminUpdate<%= modelClassName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.update({
      where: { id: <%= modelPropertyName %>Id },
      data: { ...input },
      ...select,
    })
  }

  leaderDelete<%= modelClassName %>(info: GraphQLResolveInfo, leaderId: string, <%= modelPropertyName %>Id) {
    return this.data.<%= modelPropertyName %>.delete({ where: { id: <%= modelPropertyName %>Id } })
  }
}
